.python::current-versions:
  extends:
    - .python::base
  parallel:
    matrix:
      - PYTHON_IMPL: python
        VERSION:
          - "3.9"
          - "3.10"
          - "3.11"

.python::internals::scripts:
  create-cache-dir:
    - mkdir -p "$PIP_CACHE_DIR"
    - mkdir -p "$PIPENV_CACHE_DIR"

  create-config-file:
    - if [[ -n "$CONFIG_FILE" ]]; then rm -f config.py; cp "$CONFIG_FILE" "$(dirname $CONFIG_FILE)/config.py"; fi

  substitute-env-variables-in-files:
    - if [[ -n "$ENV_SUBST_FILE_LIST" ]]; then tmpfile=$(mktemp) && for f in ${ENV_SUBST_FILE_LIST//,/$IFS}; do envsubst < "$f" > "$tmpfile" && cp -f "$tmpfile" "$f"; done && rm $tmpfile; fi
    - if [[ -n "$ENV_SUBST_VARIABLE_LIST" ]]; then tmpfile=$(mktemp) && for v in ${ENV_SUBST_VARIABLE_LIST//,/$IFS}; do envsubst < "${!v}" > "$tmpfile" && cp -f "$tmpfile" "${!v}"; done && rm $tmpfile; fi

.python::internals::base:
  extends:
    - .python::cache::read
    - .retry-on-server-error

  image: ${CI_REGISTRY_IMAGE}/${APP_NAME}/testing:${CI_COMMIT_SHA}

  before_script:
    - python --version

    - !reference [".python::internals::scripts", create-cache-dir]
    - !reference [
        ".python::internals::scripts",
        substitute-env-variables-in-files,
      ]
    - !reference [".python::internals::scripts", create-config-file]

  variables:
    TMP_CACHE_DIR: .cache
    CACHE_DIR: "${CI_PROJECT_DIR}/${TMP_CACHE_DIR}"
    CACHE_FALLBACK_KEY: "$CI_DEFAULT_BRANCH"
    PIP_CACHE_DIR: "${CI_PROJECT_DIR}/${TMP_CACHE_DIR}/pip"
    PIPENV_CACHE_DIR: "${CI_PROJECT_DIR}/${TMP_CACHE_DIR}/pipenv"
    PIPENV_VENV_IN_PROJECT: "true"
    PYTHONPATH: "$CI_PROJECT_DIR"
    GITLAB_TOKEN: "$CI_JOB_TOKEN"

.python::base:
  extends:
    - .python::internals::base

  image: git.priv.iliad78.net:5050/stancer/ci-template/$PYTHON_IMPL:$VERSION

  before_script:
    - python --version
    - pipenv --version

    - !reference [".python::internals::scripts", create-cache-dir]
    - !reference [
        ".python::internals::scripts",
        substitute-env-variables-in-files,
      ]
    - !reference [".python::internals::scripts", create-config-file]

    - >
      if [[ -n "$(find -name 'requirement*.txt')" && -z "$(find -name 'Pipfile*')" ]]; then
        find -name 'requirement*.txt' -exec pipenv install --skip-lock -r {} \; ;
      fi
    - >
      if [[ -f requirements_fundamentals.txt ]]; then
        python3 -m venv --copies --clear "${CI_PROJECT_DIR}/.venv" ;
        ${CI_PROJECT_DIR}/.venv/bin/python3 -m pip install --requirement requirements_fundamentals.txt ;
      fi
    - >
      if [[ -f Pipfile ]]; then
        if [[ -f "${CI_PROJECT_DIR}/.venv/bin/activate" ]]; then
          source "${CI_PROJECT_DIR}/.venv/bin/activate" ;
        fi
        pipenv --version ;
        pipenv install --dev --python "${VERSION%%*-}" ;
      fi

    - pipenv graph

.python::cache:
  cache:
    key: "${PYTHON_IMPL}-${VERSION}-${CI_PIPELINE_ID}"
    paths:
      - $CACHE_DIR
      - .venv

    when: always

    policy: pull

.python::cache::none:
  cache: []

.python::cache::read:
  extends:
    - .python::cache

.python::cache::write:
  extends:
    - .python::cache

  cache:
    policy: pull-push
